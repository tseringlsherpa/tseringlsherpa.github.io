[
  {
    "objectID": "blog/blog.html",
    "href": "blog/blog.html",
    "title": "Blog",
    "section": "",
    "text": "This is my (yet to be named) personal blog. As an academic economist (or any kind of academic) most of my projects don’t work out well enough to be published in a major journal be that because they returned null results, or just ended up being shall we say a different kind of interesting than journals are looking for. That however does not mean they aren’t interesting to me, or to you, so I will endeavor to share those things here. I may also have a couple of posts moonlighting as a tech bro and post tutorials for various interesting computer things. Knowledge should be shared, not only the most interesting or novel knowledge, so here is some of mine."
  },
  {
    "objectID": "blog/blog.html#posts",
    "href": "blog/blog.html#posts",
    "title": "Blog",
    "section": "Posts",
    "text": "Posts"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Erik Andersen",
    "section": "",
    "text": "I am a third year PhD student in the University of Washington department of economics specializing in development economics. My research focuses on the Economics of Education in developed and developing countries, with a particular focus on Ghana. I try to understand the choices people make about how much to invest into their own, and their children’s education, and when those decisions may be biased. I am also keenly interested in (but haven’t had enough spare research time to investigate) how those choices interact with changing environmental factors such as spillover effects from mining.\nI obtained my Bachelor’s and Masters degrees (both in economics) from the University of Oregon, and before that, I lived in the beautiful Bay Area.\nI spend my spare time exploring Seattle and the Salish Sea area by bike, and reading lots of novels."
  },
  {
    "objectID": "service.html",
    "href": "service.html",
    "title": "Service",
    "section": "",
    "text": "I am an active member of the University of Washington community. I am the current president of the Department of Economics Graduate Student Committee, and have served as a member since 2022. The committee serves as a liaison to the faculty to voice student concerns, and we have worked hard to ensure all students have an equitable funding situation. I have also served as the union steward to the Department of Economics since 2024. I helped organize students within the department to ensure we reached an equitable collective bargaining contract with the university."
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "Current students, please email me at eander46@uw.edu for questions, or to set up a meeting. Please see the syllabus for office hours."
  },
  {
    "objectID": "teaching.html#independent-instructor",
    "href": "teaching.html#independent-instructor",
    "title": "Teaching",
    "section": "Independent Instructor",
    "text": "Independent Instructor\nEC 300: Intermediate Microeconomics\nWinter 2025 (Syllabus), Spring 2025 (Syllabus)\nEC 200: Introduction to Microeconomics\nAutumn 2024 (Syllabus)\nEC 201: Introduction to Macroeconoimcs\nSummer 2024 (Syllabus)"
  },
  {
    "objectID": "teaching.html#teaching-assistant",
    "href": "teaching.html#teaching-assistant",
    "title": "Teaching",
    "section": "Teaching Assistant",
    "text": "Teaching Assistant\nEC 200: Introduction to Microeconoimcs\nSpring 2023, Autumn 2023, Winter 2024, Spring 2024"
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "I study development economics, which I interpret to be the study of economic and social problems in disadvantaged populations whether they be in developing countries or not. I work to design programs that help those struggling populations with their real-world problems, and uncover mechanisms working against their success. I do this in a rigorous way using both randomized control trials and advanced statistical methods using observational data.\nI am primarily interested in the Economics of Education, and understanding when and why people hold biased beliefs about education’s value and helping to correct those so people make more informed decisions. I am also interested in studying how these decisions are adversely affected by changing environmental factors."
  },
  {
    "objectID": "research.html#work-in-progress",
    "href": "research.html#work-in-progress",
    "title": "Research",
    "section": "Work in Progress",
    "text": "Work in Progress\nCrossing the Threshold: Complementary Effects of School Quality and Parental Engagement in Ghana\nIntegrating Educational Technology with Structured Pedagogy to Improve Learning Outcomes for Every Student (with Erik Andersen, Simon Graffy, and Monica Lambon-Quayefio)\nDisproportional Outcomes from Probationary Policies: Problems and Solutions\nAt What Level Should you Cluster, Why Cluster at All? Randomization Inference Correction to Incorrect False Rejection Rates with Small Clusters"
  },
  {
    "objectID": "tools.html",
    "href": "tools.html",
    "title": "Useful Tools",
    "section": "",
    "text": "Here’s a collection of useful links and tools I use in my research."
  },
  {
    "objectID": "tools.html#blogs-i-like",
    "href": "tools.html#blogs-i-like",
    "title": "Useful Tools",
    "section": "Blogs I like",
    "text": "Blogs I like\nCeteris Non Paribus\nDevelopment Impact\nNoahpinion\nPaul Krugman\nAn Africanist Perspective\nScott’s Mixtape\nData Colada"
  },
  {
    "objectID": "tools.html#links",
    "href": "tools.html#links",
    "title": "Useful Tools",
    "section": "Links",
    "text": "Links\nHow to make a website with Quarto."
  },
  {
    "objectID": "blog/monitors-ubuntu.html",
    "href": "blog/monitors-ubuntu.html",
    "title": "Making Monitors Work-Ubuntu Edition",
    "section": "",
    "text": "This blog is going to focus on the important issues. You know, the real down to earth stuff that affects everyone. Not just first world issues either, we will practice inclusiveness. To demonstrate my commitment, this first post will be all about making sure your dual monitor setup runs smoothly when you switch to linux.\nIf you’re anything like me (and I assume you are), you took a machine learning class in college, realized windows doesn’t let you run code in parallel as easiliy as UNIX based systems, so you very sneakily convinced you dad you needed a new 500 GB ssd to dual boot linux on. Then as soon as you booted it up, the OS decided that your secondary monitor should really be the main one: very frustrating. Power user that you are (you swapped to linux after all), you used all of your skills built up from years of using windows, booted up the Nvidia menu, toggled the switch that swaps your default monitor, then calmly went about your business. Now your monitors were working perfectly, and you were all ready to be a new linux hacker until… you restarted your computer and it swapped back. This was when you first learned that in linux many settings aren’t persistent like they are on windows, and gasp this is a feature!\nI have two goals for this post. Nominally, it is about how to use Nvidia settings correctly on Ubuntu 20.04 and above, but the more important message I hope to convey is how to how to go about trouble shooting a linux system as a new user. There is extensive documentation online detailing just about everything you can do on a linux system online, but for a brand new user, its not very helpful. You have to know what you want to do, how to look it up, and then what to do with that knowledge. In the long-run this will be a much more useful skill than knowing the xrandr1 command is the correct one to swap your display settings. Next time, you (and I) won’t have my blog post available with the perfect answer available2, so knowing the basics of how to problem solve in linux will be necessary. Hadley Wickham preaches having a scientific mindset when doing data science; you should do the same when working in linux."
  },
  {
    "objectID": "blog/monitors-ubuntu.html#intro",
    "href": "blog/monitors-ubuntu.html#intro",
    "title": "Making Monitors Work-Ubuntu Edition",
    "section": "",
    "text": "This blog is going to focus on the important issues. You know, the real down to earth stuff that affects everyone. Not just first world issues either, we will practice inclusiveness. To demonstrate my commitment, this first post will be all about making sure your dual monitor setup runs smoothly when you switch to linux.\nIf you’re anything like me (and I assume you are), you took a machine learning class in college, realized windows doesn’t let you run code in parallel as easiliy as UNIX based systems, so you very sneakily convinced you dad you needed a new 500 GB ssd to dual boot linux on. Then as soon as you booted it up, the OS decided that your secondary monitor should really be the main one: very frustrating. Power user that you are (you swapped to linux after all), you used all of your skills built up from years of using windows, booted up the Nvidia menu, toggled the switch that swaps your default monitor, then calmly went about your business. Now your monitors were working perfectly, and you were all ready to be a new linux hacker until… you restarted your computer and it swapped back. This was when you first learned that in linux many settings aren’t persistent like they are on windows, and gasp this is a feature!\nI have two goals for this post. Nominally, it is about how to use Nvidia settings correctly on Ubuntu 20.04 and above, but the more important message I hope to convey is how to how to go about trouble shooting a linux system as a new user. There is extensive documentation online detailing just about everything you can do on a linux system online, but for a brand new user, its not very helpful. You have to know what you want to do, how to look it up, and then what to do with that knowledge. In the long-run this will be a much more useful skill than knowing the xrandr1 command is the correct one to swap your display settings. Next time, you (and I) won’t have my blog post available with the perfect answer available2, so knowing the basics of how to problem solve in linux will be necessary. Hadley Wickham preaches having a scientific mindset when doing data science; you should do the same when working in linux."
  },
  {
    "objectID": "blog/monitors-ubuntu.html#solution3",
    "href": "blog/monitors-ubuntu.html#solution3",
    "title": "Making Monitors Work-Ubuntu Edition",
    "section": "Solution3",
    "text": "Solution3\nI don’t want to be accused on my very first blog post of being one of those cooking blogs where they bury the recipe after their whole life story (ignore the three paragraphs above), so I will skip to the punchline and start out telling you the commands to make your monitors work correctly.\n\nWhat’s the command?\nThe command we’ll be using is xrandr. Xrandr stands for resize, rotate, and reflect extension. This is a powerful command that lets you tinker with pretty much any setting you could think of for your monitors. Let’s look at the output first to see what we’re dealing with.4\nxrandr -q\n## Screen 0: minimum 8 x 8, current 3840 x 1080, maximum 32767 x 32767\n## DP-0 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 597mm x 336mm\n##    1920x1080     60.00 + 143.98*  119.98   119.93    59.94    50.00  \n##    1680x1050    119.99    59.95  \n##    1440x900     119.85    59.89  \n##    1280x1024    119.96    75.02    60.02  \n##    1280x720      59.94    50.00  \n##    1024x768      75.03    70.07    60.00  \n##    800x600       75.00    72.19    60.32    56.25  \n##    720x576       50.00  \n##    720x480       59.94  \n##    640x480       75.00    72.81    59.94    59.93  \n## DP-1 disconnected (normal left inverted right x axis y axis)\n## HDMI-0 connected primary 1920x1080+1920+0 (normal left inverted right x axis y axis) 598mm x 336mm\n##    1920x1080     60.00*+  59.94    50.00  \n##    1280x1024     75.02    60.02  \n##    1280x720      60.00    59.94    50.00  \n##    1152x864      75.00  \n##    1024x768      75.03    60.00  \n##    800x600       75.00    60.32  \n##    720x576       50.00  \n##    720x480       59.94  \n##    640x480       75.00    59.94    59.93  \n## DP-2 disconnected (normal left inverted right x axis y axis)\n## DP-3 disconnected (normal left inverted right x axis y axis)\n## DP-4 disconnected (normal left inverted right x axis y axis)\n## DP-5 disconnected (normal left inverted right x axis y axis)\n## USB-C-0 disconnected (normal left inverted right x axis y axis)\nIt looks confusing but don’t worry, there’s only one bit of information we need from here: the monitor names.5 The monitor names are the strings on the left called DP-0 or HDMI-0. I have a lot of monitor ports, but only those two are connected. As you can see my HDMI-0 is the primary monitor, which is wrong. I want it to be DP-0. To switch it I run the following command.\nxrandr --output DP-0 --primary\n## Screen 0: minimum 8 x 8, current 3840 x 1080, maximum 32767 x 32767\n## DP-0 connected primary 1920x1080+0+0 (normal left inverted right x axis y axis) 597mm x 336mm\n##    1920x1080     60.00 + 143.98*  119.98   119.93    59.94    50.00  \n##    1680x1050    119.99    59.95  \n##    1440x900     119.85    59.89  \n##    1280x1024    119.96    75.02    60.02  \n##    1280x720      59.94    50.00  \n##    1024x768      75.03    70.07    60.00  \n##    800x600       75.00    72.19    60.32    56.25  \n##    720x576       50.00  \n##    720x480       59.94  \n##    640x480       75.00    72.81    59.94    59.93  \n## DP-1 disconnected (normal left inverted right x axis y axis)\n## HDMI-0 connected 1920x1080+1920+0 (normal left inverted right x axis y axis) 598mm x 336mm\n##    1920x1080     60.00*+  59.94    50.00  \n##    1280x1024     75.02    60.02  \n##    1280x720      60.00    59.94    50.00  \n##    1152x864      75.00  \n##    1024x768      75.03    60.00  \n##    800x600       75.00    60.32  \n##    720x576       50.00  \n##    720x480       59.94  \n##    640x480       75.00    59.94    59.93  \n## DP-2 disconnected (normal left inverted right x axis y axis)\n## DP-3 disconnected (normal left inverted right x axis y axis)\n## DP-4 disconnected (normal left inverted right x axis y axis)\n## DP-5 disconnected (normal left inverted right x axis y axis)\n## USB-C-0 disconnected (normal left inverted right x axis y axis)\nIt swapped! For many of you, this is all the info you need, but for beginning linux users (like me mostly), this still isn’t perfect. We know how to swap the primary monitor, but we still have to run this script on every time on startup. There are a number of this to try that I’ll discuss later on, but to start out with I’ll show you the option I settled for. We’re going to make our command into a script, then put that script in our .bashrc file.\n\n\nHow to make it run6\nWe could just put the command directly into the .bashrc file, which would probably be fine since it’s only a single line, but it is better practice7 to make script files, then have .bashrc call the scripts. So, let’s make the script.\nWe’ll start by creating a text file that contains the command from above.\n# Go to the demonstration directory\n\ncd ../playground\n\n# This line assigns assigns the command from above to the file monitor.txt. I have to echo it and put it in quotes, or bash will put the output from the command into the text file. \n\necho \"xrandr --output DP-0 --primary\" &gt; monitor.txt\n\n# Now we print the text file to the screen to check it worked\n\ncat monitor.txt\n\n# Note, you can just edit a text file directly with vim or nano, but this lets me show the whole process without making a gif.\n## xrandr --output DP-0 --primary\nGreat! Now we have a text file8 containing our command, but its not executable yet, so it won’t work. We have to work with linux file permissions9 to make it work. I won’t go in depth here, but the spark notes versions should be enough for out purposes.\nSo what are file permissions? Simply, they are a way for the computer to know who is allowed to do what. Linux systems were designed not with personal computers in mind, but rather large centralized computers accessed by many people all the time. The file permission system lets this work without users being able to ruin the whole system for each other. There are three types of access a file can have: read, write, and execute shown by the r, w, and x below.\n# Reset the directory because knitting sets us to the project directory every time\n\ncd ../playground\n\n# The permissions are shown on the left. They look like -rw-rw-r--\n\nls -lh\n## total 4.0K\n## -rwxrwxrwx 1 eander462 eander462 31 May 23 19:30 monitor.txt\nThe permissions are the first thing shown in the second line after the ##. So, our fancy monitor.txt file has permissions -rw-rw-r–10. Very impressive! To make it run, we will have to give execution permission to the file. We’ll do that with the chmod command. There are two ways of telling the command what permissions we want to give, but this is the spark notes version, so see one of the links in this paragraph for more information; all we need to know is that to give every type of user full permission, we use the following command.\n# Reset the directory because knitting sets us to the project directory every time\n\ncd ../playground\n\n# Change the permissions. 777 Tells the command that we want to give each user group full permissions\n\nchmod 777 monitor.txt\n\n# See now the permissions give each user access to reading, writing, and executing\n\nls -lh \n## total 4.0K\n## -rwxrwxrwx 1 eander462 eander462 31 May 23 19:30 monitor.txt\nAnd now we’ve successfully hacked (read: done a simple, standard operation) linux. There’s just one more step to get this bad boy running: we need to put it in our .bashrc file11, so it executes when we startup our terminal on first boot.\n# Make sure to use &gt;&gt; instead of &gt; like we did last time. This is VERY IMPORTANT. If you just use a single &gt; it will over write your .bashrc file to only say monitor.txt which is definitely what you want.\n\n# Alternatively, you can just directly edit .bashrc using your preffered editor\n\necho \"monitor.txt\" &gt;&gt; .bashrc\nAnd we’re done! Now when you first run your terminal on startup, the monitor.txt program will run and set up your monitors correctly. This may have seemed like a lot, but there we’re really only three steps, and remembering how to get a script to run when you boot up your computer is a powerful tool, which will set you well on your way to be a cool linux hacker.\nThis isn’t the end of the blog. It would be the end of most blogs, but I’m usually left with a feeling that blog writings just know how to do everything, and don’t struggle to figure out the complex topics their blogs deal with. I don’t want that to be the case here. I was entirely new to linux when I tried to make my monitors work correctly, and it took me three days to work out how to run the few basic steps I’ve described. In the rest of this post, I want to show you to process of troubleshooting and discovery of the solution. I hope it will be helpful in solving the next issue that comes up."
  },
  {
    "objectID": "blog/monitors-ubuntu.html#but-wait-how-did-you-figure-that-out",
    "href": "blog/monitors-ubuntu.html#but-wait-how-did-you-figure-that-out",
    "title": "Making Monitors Work-Ubuntu Edition",
    "section": "But wait! How did you figure that out?",
    "text": "But wait! How did you figure that out?\nHow do we start out troubleshooting a problem? My first instinct was to call my dad and hope he already knew the solution, but he hates talking on the phone, so this solution probably won’t work for you. Annoying. Guess we’ll have to use that scientific mindset I talked about earlier.12 This section is mostly going to be a narrative of my problem solving process. I learned about many new system features like cron while trying to work it out, so I hope that my learning will be helpful to you (and future me).\nThe first step to science (at least computer science) is always to google it. When I google “change primary monitor ubuntu”, I get this. Confusingly for a new linux user, not one of the responses give the correct answer, or even mentions using the command line. Coming from windows where you never interact with the terminal, moving away from the safe gui toggle switches to the scary maroon maze of the command line is a hurdle. I’ll save you my pain, but it took a few hours of googling and trying their solutions to learn that I was going to need to use the terminal.\nWith the new found power of the command line we’ll update the google: “change primary monitor ubuntu command line”. And there we go; the top answer is the solution I came to using xrandr13. Excellent. At this point, I was spinning around in my chair celebrating, scaring my cats away, thinking I was done finally. I copied the command into my terminal14, ran it and went on with my day.\nSadly, upon reboot my monitors swapped back and I despaired thinking I would have to type the xrandr command into my terminal every time I booted up the computer. On the advice of my dad, I turned the command into a script in the process I described above. We couldn’t initially figure out how to run the script on startup, so for a few week, I had to type “./monitor” every time I booted the system. That was totally unacceptable, so I needed to figure out how to run a script on startup.\n\nBuilt in startup\nUbuntu comes with a built-in method for running scripts on startup, so let’s start by trying that. To access the startup menu, press the super key (the windows key or the command key depending on where your keyboard is from), type in “startup”, and push enter. A GUI will open with three buttons on the right. Press the top-most which says “Add”, name the script something helpful, then type in the path to the script we created earlier. Click add, and we should be good. Great let’s test it! A quick reboot, and… nothing. Hmm we’ll have to try something else.\n\nUpdate: This method will work, if you don’t neglect to put a shebang at the top of your script like I did. The shebang tells the computer what to use to interpret the command with. If we add shebang “#! /bin/bash” to the top of the monitor file, the startup program will run it. This is actually a better solution than the one I present above because it doesn’t require running the terminal on startup everytime. I’m going to leave the blog how it is because I think it better fits the theme I’m going for of being scientific and exploring the OS. It took me writing the blog post and retrying all of my potential solutions here to learn this solution.\n\n\n\n.config folder\nAfter some more quick googling, I decided to try the .config folder. This is a command line process, so I can show you how to do it this time. If we look inside our .config folder, we find that one of the subfolders is called “autostart”. Let’s look in there.\nls ~/.config/autostart\n## monitor.desktop\n## nvidia-settings-autostart.desktop\n## snake-razer.desktop\nThe nvidia and snake files I have in there are extra additions by me, so we’ll focus on the monitor.desktop file. We’ll use cat to view the contents.\ncat ~/.config/autostart/monitor.desktop\n## [Desktop Entry]\n## Type=Application\n## Exec=/home/eander462/monitor\n## Hidden=false\n## NoDisplay=false\n## X-GNOME-Autostart-enabled=true\n## Name[en_US]=Montior Swap\n## Name=Montior Swap\n## Comment[en_US]=Swaps the monitor to have the left one be the default\n## Comment=Swaps the monitor to have the left one be the default\nThis looks awfully like the command we just put into the startup menu. Turns out, its exactly that! The startup menu puts the scripts to run into this folder. This is a behind the scenes look at how the linux OS actually works. Most operations are reading in data from a text file stored somewhere on the system. Unfortunately, if this is just our input from earlier, its not going to solve our problem15, so let’s move onto cron.\n\n\nCron\nCron is a very helpful system resource that allows users to schedule tasks to happen at certain times. I was directed away from cron immediately in my quest because my dad didn’t know that cron supports running programs on reboot, but it turns out it does! Let’s try it out.\nThis is going to be a very cursory examination of cron because there is much to explore16. To open your crontab write “crontab -e” into the terminal. If you don’t have a crontab yet this will create one for you. Inside, we just need to write down what we want the computer to do and when. We want it to execute our monitor script at reboot. To run a task on reboot, we use “@reboot”. To specify the script to run, we just give the computer the path. So we put the following into our crontab.\n@reboot ~/monitor\nPress ctrl-x to exit cron, press y to save the changes, and we’re ready to test it out. One reboot later and… nothing again17 Very frustrating.\nFull disclosure, this process took place over the course of about a month for me. I found solutions that worked well enough, then left it for a while until I felt inspired to troubleshoot some more. Reading it as a blog makes it seem like a very linear process to troubleshoot, but its not. Its a long, frustrating process full of mostly failures.\nThis brings us to the .bashrc solution I presented above. This works, but has downsides. You have to launch the terminal on startup to flip your monitors, and every time you open a new terminal, it runs the command again which sometimes blacks out the monitors for a few seconds. At the time, I theorized that this was the only solution that worked because of the x-windows system. This is what allows a system to have a GUI. I hypothesized that my xrandr command needed this to be running, and that the startup commands ran before x-windows had launched. This turns out not to be the case; the problem was I hadn’t put a shebang in the file, so the system didn’t know what to run it with. The file executed in the .bashrc file because that file runs everything through bash."
  },
  {
    "objectID": "blog/monitors-ubuntu.html#conclusion",
    "href": "blog/monitors-ubuntu.html#conclusion",
    "title": "Making Monitors Work-Ubuntu Edition",
    "section": "Conclusion",
    "text": "Conclusion\nHere we are at the end of our troubleshooting journey, and whirlwind tour of various linux features. You are now prepared to go out and be a hacker by delving into the depths of you linux OS. My hope is you take away from this blog that linux is complicated, especially for beginners. The only way to solve your problems is to experiment. You’re (probably) not going to hurt your computer, and even if you do its fairly easy to reload from a prior backup. Don’t let the novelty scare you, just give it a go and try it out!"
  },
  {
    "objectID": "blog/monitors-ubuntu.html#footnotes",
    "href": "blog/monitors-ubuntu.html#footnotes",
    "title": "Making Monitors Work-Ubuntu Edition",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nNote: Since the first draft, I have found a different (possibly easier) way to solve this for Nvidia cards. The solution is linked here↩︎\nI definitely will be SEO boosting this thing, so it will appear over Stack overflow for anyone trying to solve this issue↩︎\nNote: this probably isn’t the best solution, but it works, and its one I discovered myself, so it fits the spirit of this blog.↩︎\n^4↩︎\nYou can also use the following command to extract the names directly, but I find regular expressions a bit confusing, so I currently prefer to do it manually. xrandr | grep -e ” connected”↩︎\nWhile writing this post, I figured out a better solution to running the script on startup, see the final section.↩︎\nSource my dad, a 60 year old senior dev.↩︎\nFun fact about linux, file extensions don’t usually matter. We could have named our file monitor.png, and it would still work exactly the same except for in a few edge cases. It is good practice to give your file a logical extension name though to avoid confusion.↩︎\nI recommend chapter 9 of this book for a good explanation of how the linux permissions system works if you are curious to learn more.↩︎\nWhy are the rw’s repeated three times? Well it has to do with user groups. There are three levels of permissions, each can be uniquely given access to a combination of read, write and execute. This isn’t important for our purposes here, since this is a harmless command, and we will just give everyone full permission↩︎\nOr .zshrc if you use zshell.↩︎\nI’ve only been a linux user for half a year, but I’m already much better at problem solving than I was at the start. This troubleshooting walk through is going to be at a very basic level, but for a good reason; this tutorial is aimed at past me who spent three days trying to learn linux from scratch and not knowing the most basic of things. A few of the methods I show are going to look dumb, but that is how I learned, so I hope it will be a good resource.↩︎\nA quick warning. I hadn’t gotten command line syntax down perfectly at this point, so I typed the command as “xrandr –output ‘DP-0’ –primary” with DP-0 in quotes. Don’t do this. The command runs and does what it is supposed to, but it throws up an error every time which I ignored. When I ran it automatically on startup, the error mattered. The OS refused to launch the desktop environment, and I was stuck trying to tell the OS the error was fine and it could continue the normal startup process. I recommend using the cheat command line utility for figuring out fiddiliy things like this.↩︎\nPro(ish) tip: ctrl-c, and ctrl-v don’t work in the terminal because the terminal was build before windows ever created those commands. Instead use ctrl-shift-c/v or middle click to copy paste.↩︎\nExcept that it did perfectly solve the problem.↩︎\nThis is a helpful resource to schedule your cron jobs.↩︎\nIt probably works if we did the shebang properly.↩︎"
  },
  {
    "objectID": "blog/simpsons_paradox.html",
    "href": "blog/simpsons_paradox.html",
    "title": "Do the Poorest Children in Ghana Know about Sheepskin?",
    "section": "",
    "text": "Here’s an interesting fact reported by UNICEF: in Ghana, the poorest children drop out of school at a much higher rate than their richer peers, but unexpectedly if they finished a level of schooling, e.g. finish elementary school, they are much more likely than their peers to carry on and start middle school, high school or university. Children who don’t carry on to the next level of schooling are said to have “non-transitioned”, and the poorest children in Ghana are stunningly more likely to transition than their peers. Children whose parents earn in the bottom 20% of income non-transition only 9% of the time, while children even marginally richer whose parents fall in the bottom 20 to 40% of incomes non-transition 17% of the time! It gets even worse as children climb the income ladder with the highest income students non-transitioning 26% of the time. A full quarter of upper income students fail to carry on to the next level of schooling at some point in their academic careers. What is going on here? I had some theories and spent quite a bit of time pursuing one, only to find that what we have here is a classic statistical trick called a Simpson’s Paradox, a statistical trick where a pattern in the data can entirely reverse if you look at it at an aggregated versus disaggregated level."
  },
  {
    "objectID": "blog/simpsons_paradox.html#theorize-with-me",
    "href": "blog/simpsons_paradox.html#theorize-with-me",
    "title": "Do the Poorest Children in Ghana Know about Sheepskin?",
    "section": "Theorize with Me",
    "text": "Theorize with Me\nBefore I walk you through what a Simpson’s Paradox is and where it rears its head, and I want to illustrate how dangerous they can be by telling you a theory I came up with to explain this apparent contradiction that I thought was compelling (and spent an embarrassingly long time designing a project to test)1.\nImagine two students: Erik and Thomas. Thomas is from a relatively rich, sophisticated family. His parents are not so wealthy he never has to work, in fact they are highly invested in making sure Thomas does whatever it takes to get the highest paying job he can. In their research, they discover that sheepskin effects where returns to schooling exhibit a big jump after getting a degree from completing a level of schooling are the main driver of returns to education. Finishing sophomore year in high school won’t increase your earnings by much, it’s only the high school diploma. If Thomas finishes elementary school, but is only a marginal student, unlikely to succeed in the cauldron of middle school, his parents won’t make him stick it out. They know the first two years of middle school won’t give him any boost in pay, so if he is unlikely to get the coveted middle school diploma, he should drop out right at the start. Thomas, and students like him will thus non-transition quite a lot.\nBut what about Erik? Erik is from a very poor family who don’t have enough time or resources to be able to learn about sheepskin effects. Erik seems to be learning more and more every year, so they assume his post-school income should also be increasing incrementally every year he completes.2 To them, there’s no reason to favor dropping out at a transition point any more than at any other time. If Erik is a marginal student unlikely to finish high school, so what? He’ll stay a couple years, boost his resume, then drop out when the time is right. There are no critical decision making points as there are for the rich, in the know family. If every day of school is equally valuable for earnings, then waiting a few days or years to dropout does no harm. If there are sharp, discontinuous points in the earnings function, there are critical points when parents have to make quick decisions to pull their child out of school to avoid “wasting” time with schooling that provides no direct boost to earnings.\nTogether, these effects explain UNICEF’s fact. Even though poor children drop out more, their dropouts are distributed throughout their academic careers. Rich children drop out less, but always at these critical transition points. An elegant way to explain the contradiction. I spent a long while designing an intervention to prevent this over investment in education by the poorest students by telling them about sheepskin effects, and thus boosting the lifetime earnings in important ways, and potentially digging the poorest families out of a poverty trap.\nThe only problem is, the contradiction didn’t exist in the first place."
  },
  {
    "objectID": "blog/simpsons_paradox.html#lies-damned-lies-and-statistics",
    "href": "blog/simpsons_paradox.html#lies-damned-lies-and-statistics",
    "title": "Do the Poorest Children in Ghana Know about Sheepskin?",
    "section": "Lies, Damned Lies, and Statistics",
    "text": "Lies, Damned Lies, and Statistics\nA Simpson’s Paradox3 where if you consider the whole of your sample, one pattern appears, but if you look at each subgroup, the pattern disappears or reverses itself: missing the trees for the forest. This phenomenon is so clear when you look at it on a picture as to appear obvious, but when faced with real data, and no knowledge that a Simpson’s Paradox might be lurking, it is anything but. I’ll walk you through the background of Ghana’s education system, and see if you can spot the Simpson’s Paradox that explains the contradiction before I reveal it4.\n\n\n\nSource: Wikipedia\n\n\nGhana has four levels of schooling—basic school (BS), junior high school (JHS), senior high school (SHS), and university—meaning there are three possible non-transition points—BS to JHS, JHS to SHS, and SHS to university. Like many developing countries (and to a lesser extent developed countries), enrollment drops off precipitously the higher level of school you look at. The overall non-transition rates at those three breaks are given below. Most students make it to JHS, we lose some more going to SHS, then the big culling of enrollment happens as students transition to university.\n\n\n\nData source: MICS-EAGLE 2017-18\n\n\nWe’re interested in looking at this data by income level, so let’s break each of those transition points up by income level. I’ll just report the poorest and richest students for simplicity’s sake. Here’s the Simpson’s Paradox! At the first two transition points the poorest students are much more likely to non-transition than the richest ones, and at the final transition, they’re about equal5.\n\n\n\nData source: MICS-EAGLE 2017-18\n\n\nHow can it be that this fact is true, and yet if we aggregate all these together and look at total non-transition rates as UNICEF did, it looks like the poorest students transition at a much higher rate than the rich? Look closely at the table below, and notice the number of poor and rich students at each transition point. Because the rich students transition at a much higher rate at every point, more of them survive to be culled by the massive non-transition rate to university. Poor students, on the other hand, either non-transition early, or drop out at a different point in the year, and so don’t exist to be counted at the university transition when almost everyone drops out. Thus the rich students are over-represented at the non-transition points that make up the bulk of the average, while the poor students filter out before they can be properly added up in the average. We end up with a fact that while true is greatly misleading about the situation on the ground."
  },
  {
    "objectID": "blog/simpsons_paradox.html#so-what",
    "href": "blog/simpsons_paradox.html#so-what",
    "title": "Do the Poorest Children in Ghana Know about Sheepskin?",
    "section": "So What?",
    "text": "So What?\nWhy am I writing a blog about this? Two reasons. First, I think this is a quite interesting example of a common statistical foible. Even spending too long working on this project and writing this blog, I still find it a bit hard to wrap my head around how this is all true at the same time, so I want to put it out there so other people don’t waste as much time figuring it out as I did.\nSecond and more importantly, this highlights the perils of misleading data presentation. The graph UNICEF made and put in their fact sheet is 100% true and reproducible, but even with their minor note about this being a Simpson’s Paradox (which I find completely unclear) it is still misleading. Put yourself in the shoes of a Ghanaian policy maker6. The fact sheet is designed to provide easily digestible information to policy makers that they can act on to improve Ghana’s education system, but any policy made on the basis of this fact alone would be harmful. My idea was that the poorest students were over investing in education and wasting potential earning years, but they are not. As we saw when we dug deeper into this data, as we might expect a priori, the poorest students get significantly less education than their richer peers, so any policy helping them prevent over investing in education would only push the poorest students farther behind. Presenting the data in a way that better represents the truth on the ground can help make sure good development money isn’t thrown after bad facts.\nAs scientists, and especially scientists in development where our work can directly impact where large amounts of money are spent, we should aspire to not just find and report all things that are true, but to represent them in the most honest way we can. Facts that are misleading are the most dangerous kind of misinformation, and having scientists (or politicians) arbitrating on what makes a fact misleading leads you down all kinds of dangerous paths, and yet it is still our responsibility to do so, to find the right route through the garden of all knowledge, keep discovering things about the world, and share them."
  },
  {
    "objectID": "blog/simpsons_paradox.html#footnotes",
    "href": "blog/simpsons_paradox.html#footnotes",
    "title": "Do the Poorest Children in Ghana Know about Sheepskin?",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThis theory turned out to be wrong, so there are a lot of holes you can poke in it, but the point is you can pretty easily develop a compelling theory to explain whatever statistical artifact you want↩︎\nOr every day he completes at the extreme.↩︎\nUnfortunately not named after the TV family, but the much less cool Edward H. Simpson who worked as a code breaker during WW2 at Bletchley Park.↩︎\nThe data is available here if you want to play around with it yourself. It’s the Ghana MICS6 survey from 2017-18.↩︎\nThe reversal at the final transition point is probably a form of survivor bias. It takes an exceptional student to make it all the way through twelve grades when they have hardly any resources, so by the end you are left with only the best.↩︎\nOr a poor PhD student looking for a project.↩︎"
  }
]